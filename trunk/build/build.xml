<project name="JaqLib" default="deploy" basedir=".">
	
  <!-- ========================================= -->
  <!-- Properties for version management -->
  <!-- ========================================= -->  
  
  <property file="./version.properties" />
  <property name="version.fullString" value="${version.major}.${version.minor}" />

	
	<!-- ========================================= -->
	<!-- User defined paths -->
	<!-- ========================================= -->
	
	<property name="dist.dir" value="d:/play/Projekte/JaQLib/release" />
	<property name="build.temp" value="d:/play/Projekte/JaQLib/temp" />
	<property name="cobertura.dir" value="D:/programme/Softwareentwicklung/cobertura-2.0.3/" />	
	<!-- javadoc.exe must available in the path-variable --> 
	
	<!-- ========================================= -->
	<!-- Properties for source paths -->
	<!-- ========================================= -->
	
	<property name="build.base" value="${ant.file.JaqLib}/../.." />
	<property name="build.source" value="${build.base}/components" />
	<property name="build.temp.javadoc" value="${build.temp}/javadoc" />

	<property name="instrumented.dir" value="${build.temp}/bin_instrumented" />
	<property name="vendor.base" value="${build.base}/vendor" />
	
	<property name="jaqlib_core.base" value="${build.source}/jaqlib_core" />
	<property name="jaqlib_core.source" value="${jaqlib_core.base}/java" />
	<property name="jaqlib_core.unittest" value="${jaqlib_core.base}/unittest" />

	<property name="jaqlib_iterable.base" value="${build.source}/jaqlib_iterable" />
	<property name="jaqlib_iterable.source" value="${jaqlib_iterable.base}/java" />
	<property name="jaqlib_iterable.unittest" value="${jaqlib_iterable.base}/unittest" />

	<property name="jaqlib_db.base" value="${build.source}/jaqlib_db" />
	<property name="jaqlib_db.source" value="${jaqlib_db.base}/java" />
	<property name="jaqlib_db.unittest" value="${jaqlib_db.base}/unittest" />

  <property name="jaqlib_xml.base" value="${build.source}/jaqlib_xml" />
  <property name="jaqlib_xml.source" value="${jaqlib_xml.base}/java" />
  <property name="jaqlib_xml.unittest" value="${jaqlib_xml.base}/unittest" />
	
	<property name="jaqlib_facade.base" value="${build.source}/jaqlib_facade" />
	<property name="jaqlib_facade.source" value="${jaqlib_facade.base}/java" />
	<property name="jaqlib_facade.unittest" value="${jaqlib_facade.base}/unittest" />
	
	<property name="jaqlib_util.base" value="${build.source}/jaqlib_util" />
	<property name="jaqlib_util.source" value="${jaqlib_util.base}/java" />
	<property name="jaqlib_util.unittest" value="${jaqlib_util.base}/unittest" />

	
	<path id="jaqlib.libs">
		<fileset file="${vendor.base}/cglib/cglib-nodep-2.1_3.jar" />
		<fileset file="${vendor.base}/derby/derby.jar" />
		<fileset dir="${vendor.base}/xalan/" />
		<fileset dir="${vendor.base}/jaxen/" />
		<fileset dir="${vendor.base}/saxon/" />
	</path>
	
	<path id="jaqlib.unittest.libs">
		<fileset file="${vendor.base}/junit/junit.jar" />
		<fileset file="${vendor.base}/easymock/easymock.jar" />
	</path>	
	
	<path id="jaqlib.components">
		<fileset dir="${build.temp}/zip" includes="*.zip" />
	</path>
	
	<path id="jaqlib.unittest.components">
		<fileset dir="${build.temp}/zip_unittest" includes="*.zip" />
	</path>	

	<path id="cobertura.classpath">
		<fileset dir="${cobertura.dir}">
			<include name="cobertura*.jar" />
			<include name="lib/**/*.jar" />
		</fileset>
	</path>

	<taskdef classpathref="cobertura.classpath" resource="tasks.properties"/>
	
	
	<!-- ========================================= -->
	<!-- Targets -->
	<!-- ========================================= -->
	
	<target name="clean">
		<delete dir="${build.temp}" />
	</target>
	
	
	<target name="init">
		<mkdir dir="${build.temp}" />
		<mkdir dir="${build.temp}/zip" />
		<mkdir dir="${build.temp}/zip_unittest" />
		<mkdir dir="${instrumented.dir}" />
	</target>

	
	<target name="instrument" depends="init, compile">
	    <!--
	      Remove the coverage data file and any old instrumentation.
	    -->
	    <delete file="cobertura.ser"/>
	    <delete dir="${instrumented.dir}" />

	    <!--
	      Instrument the application classes, writing the
	      instrumented classes into ${build.instrumented.dir}.
	    -->
	    <cobertura-instrument todir="${instrumented.dir}">
	      <!--
	        The following line causes instrument to ignore any
	        source line containing a reference to log4j, for the
	        purposes of coverage reporting.
	      -->
	      <ignore regex="org.apache.log4j.*" />

	      <fileset dir="${build.temp}/bin/jaqlib_util" includes="**/*.class" />
	    	<fileset dir="${build.temp}/bin/jaqlib_core" includes="**/*.class" />
	      <fileset dir="${build.temp}/bin/jaqlib_iterable" includes="**/*.class" />
	    	<fileset dir="${build.temp}/bin/jaqlib_db" includes="**/*.class" />
        <fileset dir="${build.temp}/bin/jaqlib_xml" includes="**/*.class" />
	    	<fileset dir="${build.temp}/bin/jaqlib_facade" includes="**/*.class" />
	    </cobertura-instrument>
	</target>
	
	
	<target name="compile_component">
		<!-- Compile component -->
		<property name="compile.target.dir" value="${build.temp}/bin/${component.name}" />
		<mkdir dir="${compile.target.dir}" />
		<javac destdir="${compile.target.dir}" srcDir="${build.source}/${component.name}/java" source="1.5" target="1.5" debug="true" failonerror="true" optimize="true" includeantruntime="false">
			<classpath refid="jaqlib.libs" />
			<classpath refid="jaqlib.components" />
			<classpath refid="cobertura.classpath" />
		</javac>
		
		<!-- ZIP compiled classes -->
		<zip destfile="${build.temp}/zip/${component.name}.zip" basedir="${compile.target.dir}" />
	</target>
	
	
	<target name="compile_unittestcomponent">
		<!-- Compile component -->
		<property name="compile.unittest.target.dir" value="${build.temp}/bin_unittest/${component.name}" />
		<mkdir dir="${compile.unittest.target.dir}" />
		<javac destdir="${compile.unittest.target.dir}" srcDir="${build.source}/${component.name}/unittest" source="1.7" target="1.7" debug="true" failonerror="true" optimize="true" includeantruntime="false">
			<classpath refid="jaqlib.libs" />
      <classpath refid="jaqlib.components" />
			<classpath refid="jaqlib.unittest.libs" />
      <classpath refid="jaqlib.unittest.components" />
		</javac>
		
		<!-- ZIP compiled classes -->
		<zip destfile="${build.temp}/zip_unittest/${component.name}.zip" >
		  <fileset dir="${compile.unittest.target.dir}" />
		  <fileset dir="${build.source}/${component.name}/unittest" includes="**/*.xml" />
		</zip>
		  
		<!-- Copy test files -->
		<copy toDir="${build.temp}/zip_unittest/unittest">
		  <fileset dir="${build.source}/${component.name}/unittest" includes="**/*.xml" />
		</copy> 
	</target>
	
	
	<target name="compile">
		<antcall target="compile_component" >
			<param name="component.name" value="jaqlib_util" />
		</antcall>
		<antcall target="compile_component" >
			<param name="component.name" value="jaqlib_core" />
		</antcall>
		<antcall target="compile_component" >
			<param name="component.name" value="jaqlib_iterable" />
		</antcall>
	  <antcall target="compile_component" >
	    <param name="component.name" value="jaqlib_db" />
	  </antcall>
	  <antcall target="compile_component" >
	    <param name="component.name" value="jaqlib_xml" />
	  </antcall>		
	  <antcall target="compile_component" >
	    <param name="component.name" value="jaqlib_facade" />
	  </antcall>  	  	
	</target>
	
		
	<target name="javadoc">
		<mkdir dir="${build.temp}/javadoc/jaqlib" />
		<javadoc destdir="${build.temp}/javadoc/jaqlib" >
			<classpath refid="jaqlib.libs" />
			<sourcepath path="${jaqlib_util.source}" />
			<sourcepath path="${jaqlib_core.source}" />
			<sourcepath path="${jaqlib_iterable.source}" />
			<sourcepath path="${jaqlib_db.source}" />
			<sourcepath path="${jaqlib_xml.source}" />
			<sourcepath path="${jaqlib_facade.source}" />
		</javadoc>
	</target>
	
		
	<target name="compile_unittest" depends="compile">
		<antcall target="compile_unittestcomponent" >
			<param name="component.name" value="jaqlib_util" />
		</antcall>
		<antcall target="compile_unittestcomponent" >
			<param name="component.name" value="jaqlib_core" />
		</antcall>
		<antcall target="compile_unittestcomponent" >
			<param name="component.name" value="jaqlib_iterable" />
		</antcall>
	  <antcall target="compile_unittestcomponent" >
	    <param name="component.name" value="jaqlib_db" />
	  </antcall>
	  <antcall target="compile_unittestcomponent" >
	    <param name="component.name" value="jaqlib_xml" />
	  </antcall>		
	  <antcall target="compile_unittestcomponent" >
	    <param name="component.name" value="jaqlib_facade" />
	  </antcall>  		
	</target>

		
	<target name="unittest" depends="compile_unittest">
		<mkdir dir="${build.temp}/unittest_results/jaqlib" />
		
		<!-- Iterable tests with CGLib on classpath -->
		<junit haltonfailure="false" failureproperty="junit.failure" fork="true">
			<classpath location="${instrumented.dir}" />
			<classpath refid="cobertura.classpath" />
			<classpath refid="jaqlib.components" />
			<classpath refid="jaqlib.unittest.components" />
			<classpath refid="jaqlib.libs" />
			<classpath refid="jaqlib.unittest.libs" />
			<test name="org.jaqlib.JaqlibCoreTests" toDir="${build.temp}/unittest_results/jaqlib" />
			<formatter type="xml"/>
		</junit>		
		
		<!-- Iterable tests with CGLib on classpath -->
		<junit haltonfailure="false" failureproperty="junit.failure" fork="true">
			<classpath location="${instrumented.dir}" />
			<classpath refid="cobertura.classpath" />
			<classpath refid="jaqlib.components" />
			<classpath refid="jaqlib.unittest.components" />
			<classpath refid="jaqlib.libs" />
			<classpath refid="jaqlib.unittest.libs" />
			<test name="org.jaqlib.IterableQBClassTests" toDir="${build.temp}/unittest_results/jaqlib" />
			<formatter type="xml"/>
		</junit>
		
		<!-- Iterable tests without CGLib on classpath -->
		<junit haltonfailure="false" failureproperty="junit.failure" fork="true">
      <classpath location="${instrumented.dir}" />
      <classpath refid="cobertura.classpath" />
			<classpath refid="jaqlib.components" />
			<classpath refid="jaqlib.unittest.components" />
			<classpath refid="jaqlib.unittest.libs" />
			<test name="org.jaqlib.IterableQBInterfaceTests" toDir="${build.temp}/unittest_results/jaqlib" />
			<formatter type="xml"/>
		</junit>
		
	  <!-- DB tests -->
	  <junit haltonfailure="false" failureproperty="junit.failure" fork="true">
      <classpath location="${instrumented.dir}" />
      <classpath refid="cobertura.classpath" />
	  	<classpath refid="jaqlib.components" />
      <classpath refid="jaqlib.unittest.components" />
      <classpath refid="jaqlib.libs" />
      <classpath refid="jaqlib.unittest.libs" />
	    <test name="org.jaqlib.DatabaseQBTests" toDir="${build.temp}/unittest_results/jaqlib" />
	    <formatter type="xml"/>
	  </junit>	
		
    <!-- XML tests -->
    <junit dir="${build.temp}/zip_unittest" haltonfailure="false" failureproperty="junit.failure" fork="true" >
      <sysproperty key="net.sourceforge.cobertura.datafile"
          file="./cobertura.ser" />
    	
    	<classpath location="${instrumented.dir}" />
      <classpath refid="cobertura.classpath" />
      <classpath refid="jaqlib.components" />
      <classpath refid="jaqlib.unittest.components" />
      <classpath refid="jaqlib.libs" />
      <classpath refid="jaqlib.unittest.libs" />
      <test name="org.jaqlib.XmlQBTests" toDir="${build.temp}/unittest_results/jaqlib" />
      <formatter type="xml"/>
    </junit>
		
		<!-- Util tests -->
		<junit dir="${build.temp}/zip_unittest" haltonfailure="false" failureproperty="junit.failure" fork="true">
			<sysproperty key="net.sourceforge.cobertura.datafile"
			    file="./cobertura.ser" />
			
	    <classpath location="${instrumented.dir}" />
	    <classpath refid="cobertura.classpath" />
			<classpath refid="jaqlib.components" />
			<classpath refid="jaqlib.unittest.components" />
			<classpath refid="jaqlib.unittest.libs" />
			<test name="org.jaqlib.util.UtilTests" toDir="${build.temp}/unittest_results/jaqlib" />
			<formatter type="xml"/>
		</junit>		
		
		<mkdir dir="${build.temp}/unittest_reports/jaqlib" />
		<junitreport todir="${build.temp}/unittest_reports">
			<fileset dir="${build.temp}/unittest_results/jaqlib" />
			<report todir="${build.temp}/unittest_reports/jaqlib"/>
		</junitreport>
		
		<fail if="junit.failure" message="Unittests failed" />
	</target>

	
  <target name="coverage_report">
    <!--
      Generate a series of HTML files containing the coverage
      data in a user-readable form using nested source filesets.
    -->
    <cobertura-report destdir="${build.temp}/coverage_reports/jaqlib">
      <fileset dir="${jaqlib_util.source}" includes="**/*.java" />
    	<fileset dir="${jaqlib_core.source}" includes="**/*.java" />
      <fileset dir="${jaqlib_iterable.source}" includes="**/*.java" />
    	<fileset dir="${jaqlib_db.source}" includes="**/*.java" />
    	<fileset dir="${jaqlib_xml.source}" includes="**/*.java" />
    	<fileset dir="${jaqlib_facade.source}" includes="**/*.java" />
    </cobertura-report>
  </target>
	
	
	<target name="jar" depends="compile, javadoc">
		<mkdir dir="${build.temp}/jar" />
		
		<jar destfile="${build.temp}/jar/jaqlib-${version.fullString}.jar" >
			<zipgroupfileset dir="${build.temp}/zip" />
			<fileset file="${build.base}/doc/apache_license-2.0.txt" />
		</jar>
		<jar destfile="${build.temp}/jar/jaqlib-${version.fullString}-src.zip" >
			<fileset dir="${jaqlib_util.source}" />
			<fileset dir="${jaqlib_core.source}" />
			<fileset dir="${jaqlib_iterable.source}" />
			<fileset dir="${jaqlib_db.source}" />
			<fileset dir="${jaqlib_xml.source}" />
			<fileset dir="${jaqlib_facade.source}" />
		</jar>
		<jar destfile="${build.temp}/jar/jaqlib-${version.fullString}-unittest.zip" >
			<fileset dir="${jaqlib_util.unittest}" />
			<fileset dir="${jaqlib_core.unittest}" />
			<fileset dir="${jaqlib_iterable.unittest}" />
			<fileset dir="${jaqlib_db.unittest}" />
			<fileset dir="${jaqlib_xml.unittest}" />
			<fileset dir="${jaqlib_facade.unittest}" />
		</jar>
		<jar destfile="${build.temp}/jar/jaqlib-${version.fullString}-doc.zip" basedir="${build.temp}/javadoc/jaqlib" />
	</target>

	
	<target name="deploy" depends="clean, init, compile, instrument, unittest, coverage_report, jar">
		<mkdir dir="${dist.dir}/${version.fullString}/dist" />
		<copy toDir="${dist.dir}/${version.fullString}/dist" >
			<fileset dir="${build.temp}/jar" />
		</copy>
		<mkdir dir="${dist.dir}/${version.fullString}/reports/unittest" />
		<copy toDir="${dist.dir}/${version.fullString}/reports/unittest" >
			<fileset dir="${build.temp}/unittest_reports/jaqlib" />
		</copy>
	  <mkdir dir="${dist.dir}/${version.fullString}/reports/coverage" />
	  <copy toDir="${dist.dir}/${version.fullString}/reports/coverage" >
	    <fileset dir="${build.temp}/coverage_reports/jaqlib" />
	  </copy>
    <mkdir dir="${dist.dir}/${version.fullString}/reports/javadoc" />
    <copy toDir="${dist.dir}/${version.fullString}/reports/javadoc" >
      <fileset dir="${build.temp}/javadoc/jaqlib" />
    </copy>
    <copy toDir="${dist.dir}/${version.fullString}/dist" >
      <fileset file="../doc/release_notes.txt" />
    </copy>
		
		<delete dir="./dbunittest" failonerror="false" />
		<delete file="./derby.log" failonerror="false" />
		<delete file="./cobertura.ser" failonerror="false" />
	</target>
	
</project>
