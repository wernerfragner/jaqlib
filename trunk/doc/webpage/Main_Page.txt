==Introduction==
JaqLib (Java Query Library) is a compact Java library that supports programmers in querying all sorts of collections and databases in a compact and intuitive manner.

<p>
WHERE conditions can be specified by custom implementations of the <tt>WhereCondition</tt> interface, by using the <tt>where().element()</tt> expression and by using a <b>method call recording mechanism</b> (see also the first example below): first the programmer must call the desired method on the returned proxy object. This method call is recorded by JaQLib. When
evaluating the WHERE condition this method call is replayed on every element. The result of this method call is then evaluated against the specified condition. This method call record mechanisms uses [http://java.sun.com/j2se/1.3/docs/guide/reflection/proxy.html JDK dynamic proxies] for proxying interfaces and [http://cglib.sourceforge.net/ CGLIB] for proxying classes. So if you want to record method calls on classes you have to [https://sourceforge.net/project/showfiles.php?group_id=56933 download] CGLIB and put it on the classpath of your application.
</p>

<p>
JaQLib uses the standard [http://java.sun.com/j2se/1.4.2/docs/guide/util/logging/overview.html JDK Logging mechanism]. Logging to the console can be activated by calling <tt>org.jaqlib.util.LogUtil.enableConsoleLogging()</tt>. These log messages also include descriptive string representations of all executed queries.
</p>

<p>
But examples are always better than some abstract descriptions. So lets start with some basic examples:
</p> 

* [[Iterable Queries]]
* [[Database Queries]]


==Usage Scenarios==
* Selecting arbitrary elements from collections, maps, ... in everyday programming tasks.
* Using the database query support for unit testing. E.g., when you want to read back previously inserted/updated/deleted data from database in order to check if the unittest worked correctly.
* Using the database query support for simple applications that need a quick and easy way to select data from database (without the coding overhead of JDBC or OR-Mappers like [http://www.hibernate.org Hibernate], [http://www.oracle.com/technology/products/ias/toplink/index.html Oracle TopLink], [http://ibatis.apache.org iBatis], ...).
* Using the database OR Mapping support for simple applications or prototypes.

==Roadmap==
* Querying XML files.
* Simple INSERT/UPDATE/DELETE database statements using the JaQLib fluent interface.
* Execution of WHERE conditions at database.


==Links==
* [https://sourceforge.net/projects/jaqlib/ JaQLib at SourceForge]
* [https://sourceforge.net/news/?group_id=219830 JaQLib News]
* [https://sourceforge.net/forum/?group_id=219830 JaQLib Forums]
* [https://sourceforge.net/project/showfiles.php?group_id=219830 JaQLib Downloads]
* [http://apps.sourceforge.net/mantisbt/jaqlib/main_page.php JaQLib BugTracker]
* [http://jaqlib.sourceforge.net/javadoc/ JaQLib Javadoc]
