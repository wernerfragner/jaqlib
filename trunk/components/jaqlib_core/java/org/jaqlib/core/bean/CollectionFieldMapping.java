package org.jaqlib.core.bean;

import java.util.Collection;

/**
 * Represents a field that has the type (or subtype of) {@link Collection}. This
 * special mapping is needed because collection fields have also an element type
 * to which data should be mapped.
 * 
 * @author Werner Fragner
 */
public class CollectionFieldMapping extends FieldMapping<Collection<?>>
{

  private final BeanMapping<?> elementMapping;

  private boolean userDefinedElementSourceName = false;
  private String elementSourceName = null;


  /**
   * Constructs a new collection field mapping by using the given name as source
   * and target name.
   * 
   * @param fieldName the Java bean field name.
   * @param fieldType the type of the Java bean field.
   * @param elementMapping the mapping definition for the elements of the
   *          collection.
   */
  public CollectionFieldMapping(String fieldName,
      Class<Collection<?>> fieldType, BeanMapping<?> elementMapping)
  {
    super(fieldName, fieldType);
    this.elementMapping = elementMapping;
  }


  /**
   * Gets the mapping definition for the elements of the collection.
   * 
   * @return see description.
   */
  public BeanMapping<?> getElementMapping()
  {
    return elementMapping;
  }


  /**
   * <p>
   * Sets the source name of the elements in the collection. E.g. the collection
   * is named 'history' (see {@link #setSourceName(String)} and the elements are
   * named 'historyEntry' (see {@link #setElementSourceName(String)}).
   * </p>
   * <p>
   * If no element name is given then it is generated by assuming that the
   * collection name ends with a 's' or 'List'. This part is stripped from the
   * source name in order to generate the singular name. E.g, collection source
   * name is 'transactions', generated element source name will be
   * 'transaction'.
   * </p>
   * 
   * @param name the source name that should be used to find the collection
   *          elements at the source.
   */
  public void setElementSourceName(String name)
  {
    this.elementSourceName = name;

    this.userDefinedElementSourceName = true;
  }


  /**
   * Gets the source name of the elements in the collection. If the user has
   * specified a element source name using {@link #setElementSourceName(String)}
   * then this value is returned. Otherwise a element source name is generated
   * by stripping a trailing 's' or 'List' from the source name of this field.
   * 
   * @return see description.
   */
  public String getElementSourceName()
  {
    if (this.userDefinedElementSourceName)
    {
      return this.elementSourceName;
    }

    String name = getSourceName();

    if (name.endsWith("s"))
    {
      return name.substring(0, name.length() - 1);
    }
    else if (name.endsWith("List"))
    {
      return name.substring(0, name.length() - 4);
    }
    return name;
  }

}
