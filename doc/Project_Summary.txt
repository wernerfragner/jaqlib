Java Query Library (JaqLib) is a compact Java library that supports programmers in querying all sorts of collections, DBs and XML files in a compact and intuitive manner. Example: List<MyItem> result = QB.select(MyItem.class).from(myCollection).where(myCondition).toList();

Technical aspects:
- JaqLib provides a fluent API:
Example: List<MyItem> result = QB.select(MyItem.class).from(myCollection).where(myCondition).toList();

- JaqLib uses generics in order to avoid typecasts.

- JaqLib uses JDK dynamic proxies (and optionally CGLib for proxing classes) to record method calls. These recorded method calls are used in the where clause for searching for matches in the collection. 
Example:
MyItem item = QB.createConditionRecorder(MyItem.class); // create proxy
MyItem result = QB.select(MyItem.class).from(myCollection).where(item.getPrimaryKey()).isEqual(somePk).uniqueResult();