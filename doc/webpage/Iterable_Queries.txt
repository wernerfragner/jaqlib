JaQLib supports all queries against objects that implement the <tt>Iterable</tt> interface. Here are some basic examples:

===Method call recording mechanism===

<pre>
// create a 'dummy' object for recording a method call for the WHERE clause
Account account = IterableQB.getRecorder(Account.class);

// select all accounts with a balance greater than 5000
List&lt;Account&gt; result = IterableQB.select(Account.class).from(accounts).whereCall(
    account.getBalance()).isGreaterThan(5000).asList();
</pre>

===Custom WHERE conditions===

<pre>
// create condition for negative balances
WhereCondition&lt;Account&gt; deptCondition = new WhereCondition&lt;Account&gt;() {

  public boolean evaluate(Account account) {
    return (account.getBalance() &lt; 0);
  }

};

// create condition for accounts with poor credit rating
WhereCondition&lt;Account&gt; ratingCondition = new WhereCondition&lt;Account&gt;() {

  public boolean evaluate(Account account) {
    return (account.getCreditRating() == CreditRating.POOR);
  }
}

// execute query with these conditions 
List&lt;Account&gt; highRiskAccounts = IterableQB.select(Account.class).from(accounts)
    .where(deptCondition).and(ratingCondition).asList();
</pre>

===Filtering out null elements===

<pre>
List&lt;Account&gt; notNullAccounts = IterableQB.select(Account.class).from(accounts)
    .where().element().isNotNull().asList();
</pre>

===Filtering <tt>Comparable</tt> elements===

<pre>
// Account implements the Comparable interface; the balance field is used for comparing two accounts
AccountImpl spec = new AccountImpl();
account.setBalance(5000);

List&lt;Account&gt; result = IterableQB.select(Account.class).from(accounts).where()
    .element().isSmallerThan(spec).asList();
</pre>

===Map results===

<pre>
Account account = IterableQB.getRecorder(Account.class);
Map&lt;Long, Account&gt; results = IterableQB.select(Account.class).from(accounts)
    .asMap(account.getId());
</pre>

===Executing a task on each element===

<pre>
// create task that should be executed for each element
Task&lt;Account&gt; task = new Task&lt;Account&gt;()
{

  public void execute(Account account)
  {
    account.sendInfoEmail();
  }

};
IterableQB.select(Account.class).from(accounts).execute(task);
</pre>

<pre>
// create condition for negative balances
WhereCondition&lt;Account&gt; deptCondition = new WhereCondition&lt;Account&gt;()
{

  public boolean evaluate(Account account)
  {
    return (account.getBalance() &lt; 0);
  }

};

// execute task only on elements that match the given condition 
IterableQB.select(Account.class).from(accounts).where(deptCond).execute(task);

// or ...
List&lt;Account&gt; result = IterableQB.select(Account.class).from(accounts).where(
    deptCond).executeWithResult(task).asList();
</pre>


----
[[Main_Page]]
